---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, tags } = Astro.props;
---

<html lang="zh-CN">
	<head>

		{/* --- 新增部分 --- */}
        <script is:inline>
            const getTheme = () => {
                // 读取用户在切换器中选择的偏好 ('light', 'dark', 'auto')
                let preference = localStorage.getItem('theme-preference');
                if (!preference) {
                    // 如果用户从未设置过，则默认为 'auto'
                    preference = 'auto';
                }

                if (preference === 'auto') {
                    // “自动”模式下，跟随系统
                    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                }

                // “明亮”或“黑暗”模式下，直接返回用户的选择
                return preference;
            };

            const theme = getTheme();
            document.documentElement.dataset.theme = theme;
        </script>
        {/* --- 新增部分结束 --- */}

		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: var(--font-color);
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--font-color);
				opacity: 0.7;
			}
			.last-updated-on {
				font-style: italic;
			}

			.tags-container {
				display: flex;
				flex-wrap: wrap;
				justify-content: center; /* 保持标签组整体居中 */
				gap: 1rem; /* 与标签云页面统一的间距 */
				margin-bottom: 2rem;
			}

			/* 将每个标签链接变成一个卡片 */
			.tag-badge {
				display: flex;
				align-items: baseline;
				padding: 0.6rem 1.1rem; /* 使用和标签云页面一致的内边距 */
				border: 1px solid var(--border-color); /* 添加边框 */
				border-radius: 8px; /* 添加圆角 */
				background-color: transparent; /* 默认背景透明 */
				text-decoration: none;
				transition: background-color 0.2s ease, border-color 0.2s ease;
			}

			/* 添加与标签云页面一致的悬浮特效 */
			.tag-badge:hover {
				background-color: var(--code-bg-color);
				border-color: var(--link-color);
			}

			.tag-badge:hover .tag-name-wrapper {
				color: var(--link-color);
			}

			/* 为了能同时给 # 和文字应用 hover 效果，我们用一个 span 包裹它们 */
			.tag-name-wrapper {
				color: var(--heading-color);
				font-size: 1.05em;
				font-weight: 600;
				transition: color 0.2s ease;
			}

			.tag-name-wrapper::before {
				content: '#';
				color: var(--link-color);
				font-weight: 700;
				margin-right: 4px;
				opacity: 0.6;
			}
		</style>
	</head>

	<body>
		<div class="page-wrapper">
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						{tags && tags.length > 0 && (
							<div class="tags-container">
								{tags.map((tag) => (
									<a href={`/tags/${tag}`} class="tag-badge">
										<span class="tag-name-wrapper">{tag}</span>
									</a>
								))}
							</div>
						)}
						<hr />
					</div>

					<slot />
				</div>
			</article>
		</main>
		<Footer />
		</div>
	</body>
</html>
